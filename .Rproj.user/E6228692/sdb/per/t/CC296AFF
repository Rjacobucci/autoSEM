{
    "contents" : "#'\n#'\n#' This function houses a number of different heuristic optimization algorithms for specification search.\n#' @param method which optimization algorithm to use\n#' @keywords autoSEM\n#' @export\n#' @examples\n#' autoSEM()\n#'\n#'\nautoSEM <- function(method=\"tabuSearch\",nfac=NULL,varList=NULL,\n                    criterion=\"BIC\",minInd=3,stdlv=TRUE,orth=TRUE,\n                    niter=30){\n\n  fitness <- function(string) {\n\n    lll = varList\n\n    uuu = list()\n    for(i in 1:length(lll)){\n      uuu[[i]] = length(lll[[i]])\n    }\n\n    jjj =  list()\n    for(i in 1:nfac){\n      jjj[[i]] =  string[1:uuu[[i]]]\n      string = string[-(1:uuu[[i]])]\n    }\n\n    for(i in 1:length(jjj)){\n      if(sum(jjj[[i]]) < minInd){\n        if(method==\"GA\"){\n          return(-99999999)\n        }else if(method==\"tabuSearch\"){\n          return(1)\n        }\n      }\n    }\n\n    ooo = list()\n    for(i in 1:nfac){\n      facc = paste(\"f\",i,sep=\"\")\n      ooo[[i]] = paste(paste(facc,\" =~ \"), paste(lll[[i]][jjj[[i]]==1], collapse= \"+\"))\n    }\n\n    fmld <- \"\"\n    for(jj in 1:nfac){\n      fmld <- paste(fmld,ooo[[jj]],sep=\"\\n\")\n    }\n\n    p = length(unique(unlist(varList)))\n\n    outt = lavaan::cfa(fmld,myData,orthogonal=orth,std.lv=stdlv)\n\n    if(inspect(outt,\"converged\")==F | any(eigen(inspect(outt,\"cov.lv\"))$values < 0)){\n\n      if(method==\"GA\"){\n        return(-99999999)\n      }else if(method==\"tabuSearch\"){\n        return(1)\n      }\n\n    }else{\n      bic = fitMeasures(outt)[\"bic\"]\n     # df=outt@Fit@test[[1]]$df\n      #cov.order = outt@Data@ov.names\n      #cov.test = cov(myData.test[,unlist(cov.order)])\n     # impcov = fitted(out)$cov\n      #fit.test = 0.5*(log(det(impcov)) + trace(cov.test %*% solve(impcov)) - log(det(cov.test))  - p)\n      #chisq.test = N*fit.test\n     # ncp.test = d(chisq.test,df,N)\n     # RMSEA.test = rmsea(ncp.test,df)\n\n      if(criterion==\"BIC\"){\n        return_val = -bic\n      }else if(criterion==\"RMSEA\"){\n        return_val= -RMSEA.test\n      }\n\n\n      if(method==\"GA\"){\n        return(return_val + 1000000000000)\n      }else if(method==\"tabuSearch\"){\n        return(return_val + 1000000000000)\n      }\n\n    }\n  }\n  p_length = length(unlist(varList))\n\n  if(method==\"GA\"){\n    out = ga(\"binary\", fitness = fitness, nBits = p_length,monitor=T,maxiter=niter)\n  }else if(method==\"tabuSearch\"){\n    out = tabuSearch(size = p_length, iters = niter,objFunc = fitness)\n  }\n\n  out\n}\n",
    "created" : 1442967905607.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1939111364",
    "id" : "CC296AFF",
    "lastKnownWriteTime" : 1442973164,
    "path" : "~/Documents/Github/autoSEM/R/autoSEM.R",
    "project_path" : "R/autoSEM.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}