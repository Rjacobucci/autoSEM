{
    "contents" : "library(lavaan)\n\nN=500\npopulation.model <- '\nf1 =~ 1*x1 + 0.2*x2 + 1*x3\nf2 =~ 1*x4 + 0.2*x5 + 1*x6\nf3 =~ 1*x7 + 0.2*x8 + 1*x9\nf1~~1*f1\nf2~~1*f2\nf3~~1*f3\nf1~~0*f2\nf2~~0*f3\nf1~~0*f3\n'\n\n\nmyData <- simulateData(population.model, sample.nobs=N)\nmyData.test <- simulateData(population.model, sample.nobs=N)\n\n\nfa <-'\nf1 =~ 1*x1 + x2 + x3 + x4 + x5 + x6\nf2 =~ 1*x4 + x5 + x6 + x7 + x8 + x9\nf3 =~ NA*x1 + x2 + x3 + 1*x7 + x8 + x9\nf1~~1*f1\nf2~~1*f2\nf3~~1*f3\nf1~~0*f2\nf2~~0*f3\nf1~~0*f3\n'\nsim.out = cfa(fa,myData)\n\nlibrary(GA)\n\n\npars = parTable(sim.out)\n\n\nf1.vars <- c(\"x1\",\"x2\",\"x3\",\"x4\",\"x5\",\"x6\")\nf2.vars <- c(\"x4\",\"x5\",\"x6\",\"x7\",\"x8\",\"x9\")\nf3.vars <- c(\"x1\",\"x2\",\"x3\",\"x7\",\"x8\",\"x9\")\n\nc(1,1,1,0,0,0)\nf1.vars[c(1,1,1,0,0,0) == 1]\n\n(c(1,1,1,0,0,0) == 1)\nmod <- lm(Y ~ ., diab.train)\n\nx <- model.matrix(mod)[, -1]\ny <- model.response(model.frame(mod))\n\nstart = c(1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1)\n\n#cov.order = out@Data@ov.names\n#cov.train = cov(myData[,unlist(cov.order)])\n\n\n\n\n\n\n\nfitness <- function(string) {\n  pt1 = string[1:6]\n  pt2 = string[7:12]\n  pt3 = string[13:18]\n\n  if(sum(pt1) < 3 | sum(pt2) < 3 | sum(pt3) < 3) return(1) #return(-99999999999)\n\n  inc1 <- which(pt1 == 1)\n  inc2 <- which(pt2 == 1)\n  inc3 <- which(pt3 == 1)\n\n  f1.vars <- c(\"x1\",\"x2\",\"x3\",\"x4\",\"x5\",\"x6\")\n  f2.vars <- c(\"x4\",\"x5\",\"x6\",\"x7\",\"x8\",\"x9\")\n  f3.vars <- c(\"x1\",\"x2\",\"x3\",\"x7\",\"x8\",\"x9\")\n\n  lll = list(f1.vars,f2.vars,f3.vars)\n\n  fmld <- c(paste(\"factor1 =~ \", paste(f1.vars[inc1], collapse= \"+\")),\n    paste(\"factor2 =~ \", paste(f2.vars[inc2], collapse= \"+\")),\n    paste(\"factor3 =~ \", paste(f3.vars[inc3], collapse= \"+\")))\n\n\n  #vars = unique(c(f1.vars[inc1],f2.vars[inc2],f3.vars[inc3]))\n  #cov.test = cov(myData.test[vars])\n\n\n  out = lavaan::cfa(fmld,myData,orthogonal=T,std.lv=T)\n\n  if(inspect(out,\"converged\")==F | any(eigen(inspect(out,\"cov.lv\"))$values < 0)){\n    #return(-99999999999999)\n    return(1)\n  }else{\n    #fitMeasures(out)[\"bic\"]\n    df=out@Fit@test[[1]]$df\n    cov.order = out@Data@ov.names\n    cov.test = cov(myData.test[,unlist(cov.order)])\n    impcov = fitted(out)$cov\n    fit.test = 0.5*(log(det(impcov)) + trace(cov.test %*% solve(impcov)) - log(det(cov.test))  - 9)\n    chisq.test = N*fit.test\n    ncp.test = d(chisq.test,df,N)\n    RMSEA.test = rmsea(ncp.test,df)\n    -RMSEA.test + 100\n  }\n}\n\n#GA <- ga(\"binary\", fitness = fitness, nBits = 18,monitor=T)\nlibrary(tabuSearch)\nresult <- tabuSearch(size = 18, iters = 50,objFunc = fitness,config=start)\n\npss = which(max(result$eUtilityKeep) == result$eUtilityKeep)\nresult$configKeep[pss,]\n\nplot(GA)\nsummary(GA)\nsummary(GA)$solution\n",
    "created" : 1442966440073.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1964546130",
    "id" : "B7DC37AB",
    "lastKnownWriteTime" : 1443022308,
    "path" : "~/Documents/Github/autoSEM/examples/tabu_genalg_sim.R",
    "project_path" : "examples/tabu_genalg_sim.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}