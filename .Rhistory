out = ga("binary", fitness = fitness, nBits = p_length,monitor=T,maxiter=niter,parallel=TRUE)
}
}else if(method=="tabuSearch"){
out = tabuSearch(size = p_length, iters = niter,objFunc = fitness)
}
parallel="no"
if(replaceSamp==FALSE){
ids = sample(nrow(data),nrow(data)/2)
data_train = data[ids,]
data_test = data[-ids,]
}else if(replaceSamp==TRUE){
ids = sample(nrow(data),nrow(data),replace=TRUE)
ids2 = sample(nrow(data),nrow(data),replace=TRUE)
data_train = data[ids,]
data_test = data[ids2,]
}
replaceSamp=FALSE
if(replaceSamp==FALSE){
ids = sample(nrow(data),nrow(data)/2)
data_train = data[ids,]
data_test = data[-ids,]
}else if(replaceSamp==TRUE){
ids = sample(nrow(data),nrow(data),replace=TRUE)
ids2 = sample(nrow(data),nrow(data),replace=TRUE)
data_train = data[ids,]
data_test = data[ids2,]
}
if(method=="GA"){
if(parallel=="no"){
out = ga("binary", fitness = fitness, nBits = p_length,monitor=T,maxiter=niter,run=10)
}else if(parallel=="yes"){
out = ga("binary", fitness = fitness, nBits = p_length,monitor=T,maxiter=niter,parallel=TRUE)
}
}else if(method=="tabuSearch"){
out = tabuSearch(size = p_length, iters = niter,objFunc = fitness)
}
p_length = length(unlist(varList))
if(method=="GA"){
if(parallel=="no"){
out = ga("binary", fitness = fitness, nBits = p_length,monitor=T,maxiter=niter,run=10)
}else if(parallel=="yes"){
out = ga("binary", fitness = fitness, nBits = p_length,monitor=T,maxiter=niter,parallel=TRUE)
}
}else if(method=="tabuSearch"){
out = tabuSearch(size = p_length, iters = niter,objFunc = fitness)
}
stdlv=TRUE
orth=TRUE
if(method=="GA"){
if(parallel=="no"){
out = ga("binary", fitness = fitness, nBits = p_length,monitor=T,maxiter=niter,run=10)
}else if(parallel=="yes"){
out = ga("binary", fitness = fitness, nBits = p_length,monitor=T,maxiter=niter,parallel=TRUE)
}
}else if(method=="tabuSearch"){
out = tabuSearch(size = p_length, iters = niter,objFunc = fitness)
}
library(lavaan)
library(devtools)
library(tabuSearch)
library(GA)
setwd("/Users/RJacobucci/Documents/Github/autoSEM")
#setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
ret = autoSEM(method="GA",data=myData,nfac=3,varList=rrr,criterion="BIC",minInd=3,niter=10)
library(lavaan)
library(devtools)
library(tabuSearch)
library(GA)
setwd("/Users/RJacobucci/Documents/Github/autoSEM")
#setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
ret = autoSEM(method="GA",data=myData,nfac=3,varList=rrr,criterion="BIC",minInd=3,niter=10)
ret
summary(ret)
ret = autoSEM(method="GA",data=myData,nfac=3,varList=rrr,criterion="BIC",minInd=3,niter=20)
ret
summary(ret)
ret = autoSEM(method="tabuSearch",data=myData,nfac=3,varList=rrr,criterion="BIC",minInd=3,niter=20)
ret
summary(ret)
ret
max(ret$eUtilityKeep)
reg$$configKeep[,max(ret$eUtilityKeep)==ret$eUtilityKeep]
reg$configKeep[,max(ret$eUtilityKeep)==ret$eUtilityKeep]
ret$configKeep[,max(ret$eUtilityKeep)==ret$eUtilityKeep]
ret$configKeep[max(ret$eUtilityKeep)==ret$eUtilityKeep,]
ret$configKeep[max(ret$eUtilityKeep)==ret$eUtilityKeep,]
library(lavaan)
N=5000
population.model <- '
f1 =~ 1*x1 + 0.2*x2 + 1*x3
f2 =~ 1*x4 + 0.2*x5 + 1*x6
f3 =~ 1*x7 + 0.2*x8 + 1*x9
f1~~1*f1
f2~~1*f2
f3~~1*f3
f1~~0*f2
f2~~0*f3
f1~~0*f3
'
myData <- simulateData(population.model, sample.nobs=N)
myData.test <- simulateData(population.model, sample.nobs=N)
fa <-'
f1 =~ 1*x1 + x2 + x3 + x4 + x5 + x6
f2 =~ 1*x4 + x5 + x6 + x7 + x8 + x9
f3 =~ NA*x1 + x2 + x3 + 1*x7 + x8 + x9
f1~~1*f1
f2~~1*f2
f3~~1*f3
f1~~0*f2
f2~~0*f3
f1~~0*f3
'
sim.out = cfa(fa,myData)
nfac=3
f1.vars <- c("x1","x2","x3","x4","x5","x6")
f2.vars <- c("x4","x5","x6","x7","x8","x9")
f3.vars <- c("x1","x2","x3","x7","x8","x9")
rrr = list(f1.vars,f2.vars,f3.vars)
ret = autoSEM(method="tabuSearch",data=myData,nfac=3,varList=rrr,criterion="BIC",minInd=3,niter=20)
ret$configKeep[max(ret$eUtilityKeep)==ret$eUtilityKeep,]
ret = autoSEM(method="tabuSearch",data=myData,nfac=3,varList=rrr,criterion="RMSEA",minInd=3,niter=20)
ret$configKeep[max(ret$eUtilityKeep)==ret$eUtilityKeep,]
library(lavaan)
library(devtools)
library(tabuSearch)
library(GA)
setwd("/Users/RJacobucci/Documents/Github/autoSEM")
#setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
N=5000
population.model <- '
f1 =~ 1*x1 + 1*x2 + 1*x3 + 1*x4 + 1*x5 +
f2 =~ 0.3*x6 + 0.3*x7 + 0.2*x8 + 0.1*x9
f1~~1*f1
f2~~1*f2
f1~~0*f2
'
myData <- simulateData(population.model, sample.nobs=N)
myData.test <- simulateData(population.model, sample.nobs=N)
population.model <- '
f1 =~ 1*x1 + 1*x2 + 1*x3 + 1*x4 + 1*x5
f2 =~ 0.3*x6 + 0.3*x7 + 0.2*x8 + 0.1*x9
f1~~1*f1
f2~~1*f2
f1~~0*f2
'
myData <- simulateData(population.model, sample.nobs=N)
myData.test <- simulateData(population.model, sample.nobs=N)
fa <-'
f1 =~ NA*x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
f1~~1*f1
'
sim.out = cfa(fa,myData)
summary(sim.out)
nfac=1
f1.vars <- c("x1","x2","x3","x4","x5","x6","x7","x8","x9")
rrr = list(f1.vars)
ret = autoSEM(method="tabuSearch",data=myData,nfac=1,varList=rrr,criterion="RMSEA",minInd=3,niter=20)
nfac=1
f1.vars <- c("x1","x2","x3","x4","x5","x6","x7","x8","x9")
rrr = list(f1.vars)
ret = autoSEM(method="tabuSearch",data=myData,nfac=1,
varList=rrr,criterion="RMSEA",minInd=3,niter=20)
length(unlist(rrr))
rrr
length(unique(unlist(rrr)))
nfac=1
lll=rrr
lll = varList
uuu = list()
for(i in 1:length(lll)){
uuu[[i]] = length(lll[[i]])
}
jjj =  list()
for(i in 1:nfac){
jjj[[i]] =  string[1:uuu[[i]]]
string = string[-(1:uuu[[i]])]
}
for(i in 1:length(jjj)){
if(sum(jjj[[i]]) < minInd){
if(method=="GA"){
return(-99999999)
}else if(method=="tabuSearch"){
return(0)
}
}
}
minInd=3
for(i in 1:length(jjj)){
if(sum(jjj[[i]]) < minInd){
if(method=="GA"){
return(-99999999)
}else if(method=="tabuSearch"){
return(0)
}
}
}
string
string=c(1,1,1,1,1,0,0,0,0)
jjj =  list()
for(i in 1:nfac){
jjj[[i]] =  string[1:uuu[[i]]]
string = string[-(1:uuu[[i]])]
}
for(i in 1:length(jjj)){
if(sum(jjj[[i]]) < minInd){
if(method=="GA"){
return(-99999999)
}else if(method=="tabuSearch"){
return(0)
}
}
}
ooo = list()
for(i in 1:nfac){
facc = paste("f",i,sep="")
ooo[[i]] = paste(paste(facc," =~ "), paste(lll[[i]][jjj[[i]]==1], collapse= "+"))
}
ooo
fmld <- ""
for(jj in 1:nfac){
fmld <- paste(fmld,ooo[[jj]],sep="\n")
}
fmld
data_train=myData
outt = lavaan::cfa(fmld,data_train,orthogonal=orth,std.lv=stdlv)
stdlv=T
orth=T
outt = lavaan::cfa(fmld,data_train,orthogonal=orth,std.lv=stdlv)
outt
if(inspect(outt,"converged")==F | any(eigen(inspect(outt,"cov.lv"))$values < 0)){
if(method=="GA"){
return(-99999999)
}else if(method=="tabuSearch"){
return(0)
}
}else{
bic = fitMeasures(outt)["bic"]
df=outt@Fit@test[[1]]$df
cov.order = outt@Data@ov.names
cov.test = cov(data_test[,unlist(cov.order)])
impcov = fitted(outt)$cov
N=nrow(data_test)
fit.test = 0.5*(log(det(impcov)) + trace(cov.test %*% solve(impcov)) - log(det(cov.test))  - p)
chisq.test = N*fit.test
ncp.test = d(chisq.test,df,N)
RMSEA.test = rmsea(ncp.test,df)
if(criterion=="BIC"){
return_val = 1/bic
}else if(criterion=="RMSEA"){
return_val= -RMSEA.test
}
if(method=="GA"){
return(return_val + 1)
}else if(method=="tabuSearch"){
return(return_val + 1)
}
}
ret = autoSEM(method="GA",data=myData,nfac=1,
varList=rrr,criterion="RMSEA",minInd=3,niter=20)
ret = autoSEM(method="GA",data=myData,nfac=1,
varList=rrr,criterion="RMSEA",minInd=3,niter=20)
library(lavaan)
N=5000
population.model <- '
f1 =~ 1*x1 + 1*x2 + 1*x3 + 1*x4 + 1*x5
f2 =~ 0.3*x6 + 0.3*x7 + 0.2*x8 + 0.1*x9
f1~~1*f1
f2~~1*f2
f1~~0*f2
'
myData <- simulateData(population.model, sample.nobs=N)
myData.test <- simulateData(population.model, sample.nobs=N)
fa <-'
f1 =~ NA*x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
f1~~1*f1
'
sim.out = cfa(fa,myData)
summary(sim.out)
nfac=1
f1.vars <- c("x1","x2","x3","x4","x5","x6","x7","x8","x9")
rrr = list(f1.vars)
ret = autoSEM(method="GA",data=myData,nfac=1,
varList=rrr,criterion="RMSEA",minInd=3,niter=20)
ret
summary(ret)
ret = autoSEM(method="GA",data=myData,nfac=1,
varList=rrr,criterion="BIC",minInd=3,niter=20)
summary(ret)
library(lavaan)
library(devtools)
library(tabuSearch)
library(GA)
setwd("/Users/RJacobucci/Documents/Github/autoSEM")
#setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
ret = autoSEM(method="GA",data=myData,nfac=1,
varList=rrr,criterion="BIC",minInd=3,niter=20)
ret
summary(ret)
ooo
ooo = list()
for(i in 1:nfac){
facc = paste("f",i,sep="")
ooo[[i]] = paste(paste(facc," =~ "), paste(lll[[i]][jjj[[i]]==1], collapse= "+"))
}
lll=rrr
uuu = list()
for(i in 1:length(lll)){
uuu[[i]] = length(lll[[i]])
}
string=c(1,1,1,1,1,0,0,0,0)
jjj =  list()
for(i in 1:nfac){
jjj[[i]] =  string[1:uuu[[i]]]
string = string[-(1:uuu[[i]])]
}
for(i in 1:nfac){
facc = paste("f",i,sep="")
ooo[[i]] = paste(paste(facc," =~ "), paste(lll[[i]][jjj[[i]]==1], collapse= "+"))
}
ooo
lll
for(i in 1:nfac){
facc = paste("f",i,sep="")
ooo[[i]] = paste(paste(facc," =~ "), paste(lll[[i]]], collapse= "+"))
}
for(i in 1:nfac){
facc = paste("f",i,sep="")
ooo[[i]] = paste(paste(facc," =~ "), paste(lll[[i]], collapse= "+"))
}
ooo
kkk
sss
lll
ooo
yy = unlist(ooo)
yy
?grep
grep("x",yy)
grep(x,yy)
grep("x","NA*x",yy)
gsub("x","NA*x",yy)
ppp <- list()
for(i in 1:nfac){
ppp[[i]] = gsub("x","NA*x",ooo[[i]])
}
ppp
string
string=c(1,1,1,1,1,0,0,0,0)
for(i in 1:nfac){
ppp[[i]] = gsub("NA*x",string,ooo[[i]])
}
for(i in 1:nfac){
ppp[[i]] = gsub("NA",string,ooo[[i]])
}
ppp
grep("NA",ppp[[1]])
ppp
ppp[[1]]
ppp <- list()
for(i in 1:nfac){
ppp[[i]] = gsub("x","NA*x",ooo[[i]])
}
ppp
ppp[[1]]
grep("NA",ppp)
library(lavaan)
library(devtools)
library(tabuSearch)
library(GA)
setwd("/Users/RJacobucci/Documents/Github/autoSEM")
#setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
library(lavaan)
N=1000
population.model <- '
f1 =~ 1*x1 + 1*x2 + 1*x3 + 1*x4 + 1*x5
f2 =~ 1*x6 + 1*x7 + 1*x8 + 1*x9
f1~~1*f1
f2~~1*f2
f1~~0*f2
'
population.model <- '
f1 =~ 1*x1 + 1*x2 + 1*x3 + 1*x4 + 0*x5 + 0*x6 + 0*x7 + 0.3*x8 + 0*x9
f1~~1*f1
'
myData <- simulateData(population.model, sample.nobs=N)
myData.test <- simulateData(population.model, sample.nobs=N)
fa <-'
f1 =~ NA*x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
f1~~1*f1
'
fa <-'
f1 =~ NA*x1 + x2
f1~~1*f1
'
options(warn=1)
sim.out = cfa(fa,myData)
summary(sim.out)
1/fitMeasures(sim.out)["bic"]
start= c(1,1,1,0,0,0,1,1,1)
nfac=1
f1.vars <- c("x1","x2","x3","x4","x5","x6","x7","x8","x9")
rrr = list(f1.vars)
facs <- 1:4
ret.auto <- function(facs){
res <- list()
ret = autoSEM(method="GA",data=myData,nfac=facs,orth=FALSE,replaceSamp=FALSE,boot=FALSE,
varList=rrr,criterion="RMSEA",minInd=3,niter=3)
res$fit = 1/(summary(ret)$fitness-1)
#res$fit = -(summary(ret)$fitness-1)
res$solution = summary(ret)$solution
res
}
library(snowfall)
sfStop()
sfInit(T,4)
snowfall::sfExport("myData","rrr","facs")
sfLibrary(autoSEM); sfLibrary(lavaan); sfLibrary(GA); sfLibrary(tabuSearch)
(out = sfLapply(facs,ret.auto))
f1.vars <- c("x1","x2","x3","x4","x5","x6","x7","x8","x9")
rrr = list(f1.vars)
facs <- 1:4
ret.auto <- function(facs){
res <- list()
ret = autoSEM(method="GA",data=myData,nfac=facs,orth=FALSE,replaceSamp=FALSE,boot=TRUE,
varList=rrr,criterion="RMSEA",minInd=3,niter=3)
res$fit = 1/(summary(ret)$fitness-1)
#res$fit = -(summary(ret)$fitness-1)
res$solution = summary(ret)$solution
res
}
library(snowfall)
sfStop()
sfInit(T,4)
snowfall::sfExport("myData","rrr","facs")
sfLibrary(autoSEM); sfLibrary(lavaan); sfLibrary(GA); sfLibrary(tabuSearch)
(out = sfLapply(facs,ret.auto))
f1.vars <- c("x1","x2","x3","x4","x5","x6","x7","x8","x9")
rrr = list(f1.vars)
facs <- 1:4
ret.auto <- function(facs){
res <- list()
ret = autoSEM(method="tabuSearch",data=myData,nfac=facs,orth=FALSE,replaceSamp=FALSE,boot=TRUE,
varList=rrr,criterion="RMSEA",minInd=3,niter=3)
res$fit = 1/(summary(ret)$fitness-1)
#res$fit = -(summary(ret)$fitness-1)
res$solution = summary(ret)$solution
res
}
library(snowfall)
sfStop()
sfInit(T,4)
snowfall::sfExport("myData","rrr","facs")
sfLibrary(autoSEM); sfLibrary(lavaan); sfLibrary(GA); sfLibrary(tabuSearch)
(out = sfLapply(facs,ret.auto))
f1.vars <- c("x1","x2","x3","x4","x5","x6","x7","x8","x9")
rrr = list(f1.vars)
facs <- 1:4
ret.auto <- function(facs){
res <- list()
ret = autoSEM(method="GA",data=myData,nfac=facs,orth=FALSE,replaceSamp=FALSE,boot=TRUE,
varList=rrr,criterion="RMSEA",minInd=3,niter=3)
res$fit = 1/(summary(ret)$fitness-1)
#res$fit = -(summary(ret)$fitness-1)
res$solution = summary(ret)$solution
res
}
library(snowfall)
sfStop()
sfInit(T,4)
snowfall::sfExport("myData","rrr","facs")
sfLibrary(autoSEM); sfLibrary(lavaan); sfLibrary(GA); sfLibrary(tabuSearch)
(out = sfLapply(facs,ret.auto))
