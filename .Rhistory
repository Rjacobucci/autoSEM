<<<<<<< Updated upstream
count=count+1
uu = multFac(facList=facs,parallel="yes",ncore=4,method="GA",data=myData,orth=FALSE,CV=cv[p],
varList=rrr,criterion=crit[o],minInd=3,niter=30)
fits = c(uu[[1]]$fit,uu[[2]]$fit,uu[[3]]$fit,uu[[4]]$fit)
mat[count,1] = j
mat[count,2] = which(min(fits)==fits)
mat[count,3] = crit[o]
mat[count,4] = cv[p]
}
}
}
}
}
crit = c("BIC","RMSEA")
cv = c(FALSE,TRUE,"boot")
f1.vars <- c("x1","x2","x3","x4","x5","x6","x7","x8","x9")
rrr = list(f1.vars)
facs <- 1:4
iters=1
count=0
mat = matrix(NA,iters*3*2,4)
mods = c(mod1,mod2,mod3)
for(i in 1:iters){
for(j in 1:length(mods)){
for(o in 1:length(crit)){
for(p in 1:length(cv)){
if(cv[p] == TRUE | cv[p] == "boot" & crit[o]=="BIC"){
mat[count,1] = NA
mat[count,2] = NA
mat[count,3] = NA
mat[count,4] = NA
}else{
myData = simulateData(mods[[j]],model.type="cfa",sample.nobs=500)
count=count+1
uu = multFac(facList=facs,parallel="yes",ncore=4,method="GA",data=myData,orth=FALSE,CV=cv[p],
varList=rrr,criterion=crit[o],minInd=3,niter=30)
fits = c(uu[[1]]$fit,uu[[2]]$fit,uu[[3]]$fit,uu[[4]]$fit)
mat[count,1] = j
mat[count,2] = which(min(fits)==fits)
mat[count,3] = crit[o]
mat[count,4] = cv[p]
}
=======
>>>>>>> Stashed changes
}
}
}
}
crit = c("BIC","RMSEA")
cv = c(FALSE,TRUE,"boot")
f1.vars <- c("x1","x2","x3","x4","x5","x6","x7","x8","x9")
rrr = list(f1.vars)
facs <- 1:4
iters=1
count=0
mat = matrix(NA,iters*3*2,4)
mods = c(mod1,mod2,mod3)
for(i in 1:iters){
for(j in 1:length(mods)){
for(o in 1:length(crit)){
for(p in 1:length(cv)){
if(cv[p] == TRUE | cv[p] == "boot" & crit[o]=="BIC"){
mat[count,1] = NA
mat[count,2] = NA
mat[count,3] = NA
mat[count,4] = NA
}else{
myData = simulateData(mods[[j]],model.type="cfa",sample.nobs=500)
count=count+1
uu = multFac(facList=facs,parallel="yes",ncore=4,method="GA",data=myData,orth=FALSE,CV=cv[p],
varList=rrr,criterion=crit[o],minInd=3,niter=1)
fits = c(uu[[1]]$fit,uu[[2]]$fit,uu[[3]]$fit,uu[[4]]$fit)
mat[count,1] = j
mat[count,2] = which(min(fits)==fits)
mat[count,3] = crit[o]
mat[count,4] = cv[p]
}
}
}
}
}
traceback()
mat
cv[p]
crit[o]=="BIC" & cv[p] == TRUE | cv[p] == "boot"
crit[o]=="BIC"
f1.vars <- c("x1","x2","x3","x4","x5","x6","x7","x8","x9")
rrr = list(f1.vars)
facs <- 1:4
iters=1
count=0
mat = matrix(NA,iters*3*2,4)
mods = c(mod1,mod2,mod3)
for(i in 1:iters){
for(j in 1:length(mods)){
for(o in 1:length(crit)){
for(p in 1:length(cv)){
if(crit[o]=="BIC" & cv[p] == TRUE | cv[p] == "boot"){
mat[count,1] = NA
mat[count,2] = NA
mat[count,3] = NA
mat[count,4] = NA
}else{
myData = simulateData(mods[[j]],model.type="cfa",sample.nobs=500)
count=count+1
uu = multFac(facList=facs,parallel="yes",ncore=4,method="GA",data=myData,orth=FALSE,CV=cv[p],
varList=rrr,criterion=crit[o],minInd=3,niter=1)
fits = c(uu[[1]]$fit,uu[[2]]$fit,uu[[3]]$fit,uu[[4]]$fit)
mat[count,1] = j
mat[count,2] = which(min(fits)==fits)
mat[count,3] = crit[o]
mat[count,4] = cv[p]
}
}
}
}
}
crit = c("BIC","RMSEA")
cv = c(FALSE,TRUE,"boot")
f1.vars <- c("x1","x2","x3","x4","x5","x6","x7","x8","x9")
rrr = list(f1.vars)
facs <- 1:4
iters=1
count=0
mat = matrix(NA,iters*3*2,4)
mods = c(mod1,mod2,mod3)
for(i in 1:iters){
for(j in 1:length(mods)){
for(o in 1:length(crit)){
for(p in 1:length(cv)){
count=count+1
if(crit[o]=="BIC" & cv[p] == TRUE | cv[p] == "boot"){
mat[count,1] = NA
mat[count,2] = NA
mat[count,3] = NA
mat[count,4] = NA
}else{
myData = simulateData(mods[[j]],model.type="cfa",sample.nobs=500)
uu = multFac(facList=facs,parallel="yes",ncore=4,method="GA",data=myData,orth=FALSE,CV=cv[p],
varList=rrr,criterion=crit[o],minInd=3,niter=1)
fits = c(uu[[1]]$fit,uu[[2]]$fit,uu[[3]]$fit,uu[[4]]$fit)
mat[count,1] = j
mat[count,2] = which(min(fits)==fits)
mat[count,3] = crit[o]
mat[count,4] = cv[p]
}
}
}
}
}
mats
which(min(fits)==fits)
fits
which(min(fits)==fits)
ll = which(min(fits)==fits)
c(ll)
cat(ll)
mat[count,2] = cat(which(min(fits)==fits))
str(cat(ll))
str(list(ll))
paste(ll,collapse="")
paste(1,collapse="")
mat[count,2] = paste(which(min(fits)==fits),collapse="")
mat
f1.vars <- c("x1","x2","x3","x4","x5","x6","x7","x8","x9")
rrr = list(f1.vars)
facs <- 1:4
iters=1
count=0
mat = matrix(NA,iters*3*2,4)
mods = c(mod1,mod2,mod3)
for(i in 1:iters){
for(j in 1:length(mods)){
for(o in 1:length(crit)){
for(p in 1:length(cv)){
count=count+1
if(crit[o]=="BIC" & cv[p] == TRUE | cv[p] == "boot"){
mat[count,1] = NA
mat[count,2] = NA
mat[count,3] = NA
mat[count,4] = NA
}else{
myData = simulateData(mods[[j]],model.type="cfa",sample.nobs=500)
uu = multFac(facList=facs,parallel="yes",ncore=4,method="GA",data=myData,orth=FALSE,CV=cv[p],
varList=rrr,criterion=crit[o],minInd=3,niter=1)
fits = c(uu[[1]]$fit,uu[[2]]$fit,uu[[3]]$fit,uu[[4]]$fit)
mat[count,1] = j
mat[count,2] = paste(which(min(fits)==fits),collapse="")
mat[count,3] = crit[o]
mat[count,4] = cv[p]
}
}
}
}
}
j
paste(which(min(fits)==fits),collapse="")
crit[o]
cv[p]
mat
count
cv
cv[p]
crit = c("BIC","RMSEA")
cv = c(FALSE,TRUE,"boot")
f1.vars <- c("x1","x2","x3","x4","x5","x6","x7","x8","x9")
rrr = list(f1.vars)
facs <- 1:4
iters=1
count=0
mat = matrix(NA,iters*3*2,4)
mods = c(mod1,mod2,mod3)
for(i in 1:iters){
for(j in 1:length(mods)){
for(o in 1:length(crit)){
for(p in 1:length(cv)){
count=count+1
if(crit[o]=="BIC" & cv[p] == TRUE | crit[o]=="BIC" & cv[p] == "boot"){
mat[count,1] = NA
mat[count,2] = NA
mat[count,3] = NA
mat[count,4] = NA
}else{
myData = simulateData(mods[[j]],model.type="cfa",sample.nobs=500)
uu = multFac(facList=facs,parallel="yes",ncore=4,method="GA",data=myData,orth=FALSE,CV=cv[p],
varList=rrr,criterion=crit[o],minInd=3,niter=1)
fits = c(uu[[1]]$fit,uu[[2]]$fit,uu[[3]]$fit,uu[[4]]$fit)
mat[count,1] = j
mat[count,2] = paste(which(min(fits)==fits),collapse="")
mat[count,3] = crit[o]
mat[count,4] = cv[p]
}
}
}
}
}
mat
1:length(mods)
j
mods[[j]]
f1.vars <- c("x1","x2","x3","x4","x5","x6","x7","x8","x9")
rrr = list(f1.vars)
facs <- 1:4
iters=1
count=0
mat = matrix(NA,iters*3*2*3,4)
mods = c(mod1,mod2,mod3)
for(i in 1:iters){
for(j in 1:length(mods)){
for(o in 1:length(crit)){
for(p in 1:length(cv)){
count=count+1
if(crit[o]=="BIC" & cv[p] == TRUE | crit[o]=="BIC" & cv[p] == "boot"){
mat[count,1] = NA
mat[count,2] = NA
mat[count,3] = NA
mat[count,4] = NA
}else{
myData = simulateData(mods[[j]],model.type="cfa",sample.nobs=500)
uu = multFac(facList=facs,parallel="yes",ncore=4,method="GA",data=myData,orth=FALSE,CV=cv[p],
varList=rrr,criterion=crit[o],minInd=3,niter=1)
fits = c(uu[[1]]$fit,uu[[2]]$fit,uu[[3]]$fit,uu[[4]]$fit)
mat[count,1] = j
mat[count,2] = paste(which(min(fits)==fits),collapse="")
mat[count,3] = crit[o]
mat[count,4] = cv[p]
}
}
}
}
}
mat
f1.vars <- c("x1","x2","x3","x4","x5","x6","x7","x8","x9")
rrr = list(f1.vars)
facs <- 1:4
iters=50
count=0
mat = matrix(NA,iters*3*2*3,4)
mods = c(mod1,mod2,mod3)
for(i in 1:iters){
for(j in 1:length(mods)){
for(o in 1:length(crit)){
for(p in 1:length(cv)){
count=count+1
if(crit[o]=="BIC" & cv[p] == TRUE | crit[o]=="BIC" & cv[p] == "boot"){
mat[count,1] = NA
mat[count,2] = NA
mat[count,3] = NA
mat[count,4] = NA
}else{
myData = simulateData(mods[[j]],model.type="cfa",sample.nobs=500)
uu = multFac(facList=facs,parallel="yes",ncore=4,method="GA",data=myData,orth=FALSE,CV=cv[p],
varList=rrr,criterion=crit[o],minInd=3,niter=30)
fits = c(uu[[1]]$fit,uu[[2]]$fit,uu[[3]]$fit,uu[[4]]$fit)
mat[count,1] = j
mat[count,2] = paste(which(min(fits)==fits),collapse="")
mat[count,3] = crit[o]
mat[count,4] = cv[p]
}
}
}
}
print(i)
}
f1.vars <- c("x1","x2","x3","x4","x5","x6","x7","x8","x9")
rrr = list(f1.vars)
facs <- 1:4
iters=20
count=0
mat = matrix(NA,iters*3*2*3,4)
mods = c(mod1,mod2,mod3)
for(i in 1:iters){
for(j in 1:length(mods)){
for(o in 1:length(crit)){
for(p in 1:length(cv)){
count=count+1
if(crit[o]=="BIC" & cv[p] == TRUE | crit[o]=="BIC" & cv[p] == "boot"){
mat[count,1] = NA
mat[count,2] = NA
mat[count,3] = NA
mat[count,4] = NA
}else{
myData = simulateData(mods[[j]],model.type="cfa",sample.nobs=500)
uu = multFac(facList=facs,parallel="yes",ncore=4,method="GA",data=myData,orth=FALSE,CV=cv[p],
varList=rrr,criterion=crit[o],minInd=3,niter=30)
fits = c(uu[[1]]$fit,uu[[2]]$fit,uu[[3]]$fit,uu[[4]]$fit)
mat[count,1] = j
mat[count,2] = paste(which(min(fits)==fits),collapse="")
mat[count,3] = crit[o]
mat[count,4] = cv[p]
}
}
}
}
print(i)
}
mat
mat
mat[1,1] == mat[1,2]
na.omit(mat)
mat2 = na.omit(mat)
for(j in 1:nrow(mat)){
mat[j,1] == mat[j,2]
}
res = rep(NA,nrow(mat2))
res = rep(NA,nrow(mat2))
for(j in 1:nrow(mat2)){
res[j] = mat2[j,1] == mat2[j,2]
}
res
cat(mat2[1,3],mat2[1,4])
paste(c(mat2[1,3],mat2[1,4]),collapse="")
mat
mat2 = na.omit(mat)
res = matrix(NA,nrow(mat2),2)
for(j in 1:nrow(mat2)){
res[j,1] = mat2[j,1] == mat2[j,2]
res[j,2] = paste(c(mat2[j,3],mat2[j,4]),collapse="")
}
res
res[,2] == "BICFALSE"
res[res[,2] == "BICFALSE",]
res[res[,2] == "BICFALSE",]
res[res[,2] == "RMSEAFALSE",]
res[res[,2] == "RMSEATRUE",]
res[res[,2] == "RMSEAboot",]
res1 = res[res[,2] == "BICFALSE",]
res1[1,]== "TRUE"
res1[,1]== "TRUE"
sum(res1[,1]== "TRUE")/60
res2 = res[res[,2] == "RMSEAFALSE",]
sum(res2[,1]== "TRUE")/60
res2[,1]
res3 = res[res[,2] == "RMSEATRUE",]
sum(res3[,1]== "TRUE")/60
res4 = res[res[,2] == "RMSEAboot",]
sum(res4[,1]== "TRUE")/60
res4
library(parallel)
mod1 <- '
f1 =~ 1*x1 + 1*x2 + 1*x3 + 1*x4 + 0*x5 + 0*x6 + 0*x7 + 0.3*x8 + 0*x9
f1~~1*f1
'
mod2 <- '
f1 =~ 1*x1 + 1*x2 + 1*x3 + 1*x4 + 1*x5
f2 =~ 1*x6 + 1*x7 + 1*x8 + 1*x9
f1~~1*f1
f2~~1*f2
f1~~0*f2
'
mod3 <- '
f1 =~ 1*x1 + 0.2*x2 + 1*x3
f2 =~ 1*x4 + 0.2*x5 + 1*x6
f3 =~ 1*x7 + 0.2*x8 + 1*x9
f1~~1*f1
f2~~1*f2
f3~~1*f3
f1~~0*f2
f2~~0*f3
f1~~0*f3
'
crit = c("BIC","RMSEA")
cv = c(FALSE,TRUE,"boot")
f1.vars <- c("x1","x2","x3","x4","x5","x6","x7","x8","x9")
rrr = list(f1.vars)
facs <- 1:4
iters=20
count=0
mat = matrix(NA,iters*3*2*3,4)
mods = c(mod1,mod2,mod3)
for(i in 1:iters){
for(j in 1:length(mods)){
for(o in 1:length(crit)){
for(p in 1:length(cv)){
count=count+1
if(crit[o]=="BIC" & cv[p] == TRUE | crit[o]=="BIC" & cv[p] == "boot"){
mat[count,1] = NA
mat[count,2] = NA
mat[count,3] = NA
mat[count,4] = NA
}else{
myData = simulateData(mods[[j]],model.type="cfa",sample.nobs=500)
uu = multFac(facList=facs,parallel="yes",ncore=4,method="tabuSearch",data=myData,orth=FALSE,CV=cv[p],
varList=rrr,criterion=crit[o],minInd=3,niter=30)
fits = c(uu[[1]]$fit,uu[[2]]$fit,uu[[3]]$fit,uu[[4]]$fit)
mat[count,1] = j
mat[count,2] = paste(which(min(fits)==fits),collapse="")
mat[count,3] = crit[o]
mat[count,4] = cv[p]
}
}
}
}
print(i)
}
?tabuSearch
setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
library(parallel)
mod1 <- '
f1 =~ 1*x1 + 1*x2 + 1*x3 + 1*x4 + 0*x5 + 0*x6 + 0*x7 + 0.3*x8 + 0*x9
f1~~1*f1
'
mod2 <- '
f1 =~ 1*x1 + 1*x2 + 1*x3 + 1*x4 + 1*x5
f2 =~ 1*x6 + 1*x7 + 1*x8 + 1*x9
f1~~1*f1
f2~~1*f2
f1~~0*f2
'
mod3 <- '
f1 =~ 1*x1 + 0.2*x2 + 1*x3
f2 =~ 1*x4 + 0.2*x5 + 1*x6
f3 =~ 1*x7 + 0.2*x8 + 1*x9
f1~~1*f1
f2~~1*f2
f3~~1*f3
f1~~0*f2
f2~~0*f3
f1~~0*f3
'
crit = c("BIC","RMSEA")
cv = c(FALSE,TRUE,"boot")
f1.vars <- c("x1","x2","x3","x4","x5","x6","x7","x8","x9")
rrr = list(f1.vars)
facs <- 1:4
iters=20
count=0
mat = matrix(NA,iters*3*2*3,4)
mods = c(mod1,mod2,mod3)
for(i in 1:iters){
for(j in 1:length(mods)){
for(o in 1:length(crit)){
for(p in 1:length(cv)){
count=count+1
if(crit[o]=="BIC" & cv[p] == TRUE | crit[o]=="BIC" & cv[p] == "boot"){
mat[count,1] = NA
mat[count,2] = NA
mat[count,3] = NA
mat[count,4] = NA
}else{
myData = simulateData(mods[[j]],model.type="cfa",sample.nobs=500)
uu = multFac(facList=facs,parallel="yes",ncore=4,method="tabuSearch",data=myData,orth=FALSE,CV=cv[p],
varList=rrr,criterion=crit[o],minInd=3,niter=30)
fits = c(uu[[1]]$fit,uu[[2]]$fit,uu[[3]]$fit,uu[[4]]$fit)
mat[count,1] = j
mat[count,2] = paste(which(min(fits)==fits),collapse="")
mat[count,3] = crit[o]
mat[count,4] = cv[p]
}
}
}
}
print(i)
}
<<<<<<< Updated upstream
warnings()
history(max.show=Inf)
history()
sum(res1[,1]== "TRUE")/60
sum(res2[,1]== "TRUE")/60
sum(res3[,1]== "TRUE")/60
sum(res4[,1]== "TRUE")/60
res3
mat
sink()
mat
sum(res1[,1]== "TRUE")/60
=======
library(snowfall)
sfStop()
sfInit(T,3)
snowfall::sfExport("myData","rrr","facs")
sfLibrary(autoSEM); sfLibrary(lavaan); sfLibrary(GA)
(out = sfLapply(facs,ret.auto))
1/-.95
1/-.99
1/-.9
1/.05
1/.01
library(lavaan)
library(devtools)
library(tabuSearch)
library(GA)
setwd("/Users/RJacobucci/Documents/Github/autoSEM")
#setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
library(lavaan)
myData =  HolzingerSwineford1939[,7:15]
f1.vars <- c("x1","x2","x3","x4","x5","x6","x7","x8","x9")
rrr = list(f1.vars)
facs <- 2
ret.auto <- function(facs){
res <- list()
ret = autoSEM(method="GA",data=myData,nfac=facs,orth=FALSE,CV="boot",
varList=rrr,criterion="RMSEA",minInd=3,niter=30)
res$fit
res$solution
}
library(snowfall)
sfStop()
sfInit(T,1)
snowfall::sfExport("myData","rrr","facs")
sfLibrary(autoSEM); sfLibrary(lavaan); sfLibrary(GA)
(out = sfLapply(facs,ret.auto))
et.auto <- function(facs){
res <- list()
ret = autoSEM(method="GA",data=myData,nfac=facs,orth=FALSE,CV="boot",
varList=rrr,criterion="RMSEA",minInd=3,niter=30)
ret$fit
ret$solution
}
library(snowfall)
sfStop()
sfInit(T,1)
snowfall::sfExport("myData","rrr","facs")
sfLibrary(autoSEM); sfLibrary(lavaan); sfLibrary(GA)
(out = sfLapply(facs,ret.auto))
ret.auto <- function(facs){
ret = autoSEM(method="GA",data=myData,nfac=facs,orth=FALSE,CV="boot",
varList=rrr,criterion="RMSEA",minInd=3,niter=30)
ret$fit
ret$solution
}
library(snowfall)
sfStop()
sfInit(T,1)
snowfall::sfExport("myData","rrr","facs")
sfLibrary(autoSEM); sfLibrary(lavaan); sfLibrary(GA)
(out = sfLapply(facs,ret.auto))
library(lavaan)
library(devtools)
library(tabuSearch)
library(GA)
setwd("/Users/RJacobucci/Documents/Github/autoSEM")
#setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
ret.auto <- function(facs){
ret = autoSEM(method="GA",data=myData,nfac=facs,orth=FALSE,CV="boot",
varList=rrr,criterion="RMSEA",minInd=3,niter=30)
ret$fit
ret$solution
}
library(snowfall)
sfStop()
sfInit(T,1)
snowfall::sfExport("myData","rrr","facs")
sfLibrary(autoSEM); sfLibrary(lavaan); sfLibrary(GA)
(out = sfLapply(facs,ret.auto))
ret.auto(2)
library(lavaan)
library(devtools)
library(tabuSearch)
library(GA)
setwd("/Users/RJacobucci/Documents/Github/autoSEM")
#setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
ret.auto(2)
ret.auto <- function(facs){
ret = autoSEM(method="GA",data=myData,nfac=facs,orth=FALSE,CV="boot",
varList=rrr,criterion="RMSEA",minInd=3,niter=30)
#ret$fit
#ret$solution
ret
}
ret.auto(2)
library(lavaan)
library(devtools)
library(tabuSearch)
library(GA)
setwd("/Users/RJacobucci/Documents/Github/autoSEM")
#setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
ret.auto <- function(facs){
ret = autoSEM(method="GA",data=myData,nfac=facs,orth=FALSE,CV="boot",
varList=rrr,criterion="RMSEA",minInd=3,niter=30)
#ret$fit
#ret$solution
ret
}
ret.auto(2)
oo = ret.auto(2)
str(oo)
library(lavaan)
library(devtools)
library(tabuSearch)
library(GA)
setwd("/Users/RJacobucci/Documents/Github/autoSEM")
#setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
oo = ret.auto(2)
library(lavaan)
library(devtools)
library(tabuSearch)
library(GA)
setwd("/Users/RJacobucci/Documents/Github/autoSEM")
#setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
oo = ret.auto(2)
oo
library(lavaan)
library(devtools)
library(tabuSearch)
library(GA)
setwd("/Users/RJacobucci/Documents/Github/autoSEM")
#setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
library(lavaan)
library(devtools)
library(tabuSearch)
library(GA)
setwd("/Users/RJacobucci/Documents/Github/autoSEM")
#setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
uu = multFac(parallel="no",method="GA",data=myData,facList=facs,orth=FALSE,CV="boot",
varList=rrr,criterion="RMSEA",minInd=3,niter=30)
uu = multFac(parallel="no",method="GA",data=myData,facList=c(2,3),orth=FALSE,CV="boot",
varList=rrr,criterion="RMSEA",minInd=3,niter=30)
uu
uu = multFac(parallel="yes",method="GA",data=myData,facList=c(2,3),orth=FALSE,CV="boot",
varList=rrr,criterion="RMSEA",minInd=3,niter=30)
library(lavaan)
myData =  HolzingerSwineford1939[,7:15]
f1.vars <- c("x1","x2","x3","x4","x5","x6","x7","x8","x9")
rrr = list(f1.vars)
facs <- 2:3
uu = multFac(parallel="yes",method="GA",data=myData,facList=facs,orth=FALSE,CV="boot",
varList=rrr,criterion="RMSEA",minInd=3,niter=30)
?multFac
uu = multFac(facList=facs,parallel="yes",ncore=2,method="GA",data=myData,orth=FALSE,CV="boot",
varList=rrr,criterion="RMSEA",minInd=3,niter=30)
library(lavaan)
library(devtools)
library(tabuSearch)
library(GA)
setwd("/Users/RJacobucci/Documents/Github/autoSEM")
#setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
uu = multFac(facList=facs,parallel="yes",ncore=2,method="GA",data=myData,orth=FALSE,CV="boot",
varList=rrr,criterion="RMSEA",minInd=3,niter=30)
uu
>>>>>>> Stashed changes
