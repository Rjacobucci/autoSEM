#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
library(lavaan)
library(devtools)
library(rgenoud)
library(tabuSearch)
library(GA)
library(hydroPSO)
library(NMOF)
library(RcppDE)
setwd("/Users/RJacobucci/Documents/Github/autoSEM")
#setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
library(lavaan)
library(devtools)
library(rgenoud)
library(tabuSearch)
library(GA)
library(hydroPSO)
library(NMOF)
library(RcppDE)
setwd("/Users/RJacobucci/Documents/Github/autoSEM")
#setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
out = autoSEM(method="tabu_rj",data=myData,nfac=3,varList=list(f1.vars),orth=FALSE,CV=FALSE,
criterion="RMSEA",minInd=3,niter=30)
out
method="tabu_rj"
data=myData
nfac=3
varList=list(f1.vars)
orth=FALSE
CV=FALSE
niter=30
minInd=3
criterion="RMSEA"
ret <- list()
options(warn=2)
#if(method != "tabuSearch" & method != "GA"){
#  stop("Only tabuSearch and GA are currently working well.")
#}
if(CV==T){
ids = sample(nrow(data),nrow(data)/2)
data_train = data[ids,]
data_test = data[-ids,]
}else if(CV==FALSE){
data_train = data
}else if(CV=="boot"){
data_train = data
}else{
stop("Wrong Assignment to CV")
}
#  }else if(r
fitness <- function(string) {
lll = varList
if(method=="rgenoud" | method=="pso" | method=="NMOF" | method=="DEoptim"){
string = round(string)
}
jjj = list()
for(i in 1:nfac){
jjj[[i]] = lll
}
jjj =  list()
for(i in 1:nfac){
jjj[[i]] =  string[1:length(lll[[1]])]
string = string[-(1:length(lll[[1]]))]
}
#    for(i in 1:length(jjj)){
#      if(sum(jjj[[i]]) < minInd){
#        if(method=="GA"){
#          -44
#        }else if(method=="tabuSearch"){
#          0
#        }else if(method=="rgenoud"){
#          99999999
#        }
#      }
#    }
ooo =  list()
for(i in 1:nfac){
facc = paste("f",i,sep="")
uu = gsub("1","start(1)*",jjj[[i]])
uu = gsub("0","0*",uu)
uu2 = paste(uu,lll[[1]],sep="")
ooo[[i]] =  paste0(uu2,collapse="+")
}
for(i in 1:nfac){
facc = paste("f",i,sep="")
ooo[[i]] = paste(paste(facc," =~ "), ooo[[i]])
}
# ppp <- list()
# for(i in 1:nfac){
#  ppp[[i]] = gsub("x","NA*x",ooo[[i]])
# }
# for(uu in 1:length(start)){
#   ppp[[1]] = gsub("NA",start[uu],ppp[[1]])
#  ppp[[1]]
#}
fmld <- ""
for(jj in 1:nfac){
fmld <- paste(fmld,ooo[[jj]],sep="\n")
}
p = length(unique(unlist(varList)))
outt = try(lavaan::cfa(fmld,data_train,orthogonal=orth,std.lv=stdlv),silent=TRUE)
if(inherits(outt, "try-error")) {
if(method=="GA"){
#return(-99999999)
-99999999
}else if(method=="tabuSearch"){
#return(0)
0
}else if(method == "rgenoud" | method=="pso" | method=="NMOF" |
method=="DEoptim" | method=="tabu_rj"){
9999999999
}
}else{
if(CV==F){
bic = fitMeasures(outt)["bic"]
RMSEA = fitMeasures(outt)["rmsea"]
}else if(CV==T){
df=outt@Fit@test[[1]]$df
cov.order = outt@Data@ov.names
cov.test = cov(data_test[,unlist(cov.order)])
impcov = fitted(outt)$cov
N=nrow(data_test)
fit.test = 0.5*(log(det(impcov)) + trace(cov.test %*% solve(impcov)) - log(det(cov.test))  - p)
chisq.test = N*fit.test
ncp.test = d(chisq.test,df,N)
RMSEA = rmsea(ncp.test,df)
}else if(CV == "boot"){
RMSEA.rep <- rep(NA,100)
impcov = fitted(outt)$cov
N=nrow(data_train)
df=outt@Fit@test[[1]]$df
for(i in 1:100){
ids <- sample(nrow(data_train),nrow(data_train),replace=TRUE)
new.dat <- data_train[ids,]
cov.boot <- cov(new.dat[,outt@pta$vnames$ov.nox[[1]]])
fit.boot = 0.5*(log(det(impcov)) + trace(cov.boot %*% solve(impcov)) - log(det(cov.boot))  - p)
chisq.boot = N*fit.boot
ncp.boot = d(chisq.boot,df,N)
RMSEA.rep[i] = rmsea(ncp.boot,df)
}
RMSEA <- mean(RMSEA.rep)
}
if(method == "tabuSearch" | method== "GA"){
if(criterion=="BIC"){
return_val = 100 /bic
}else if(criterion=="RMSEA"){
return_val= 1 - RMSEA
}
}else if(method=="rgenoud" | method == "pso" |
method == "NMOF" | method=="DEoptim" |
method=="tabu_rj"){
if(criterion=="BIC"){
return_val = bic
}else if(criterion=="RMSEA"){
return_val= RMSEA
}
}
#10
if(method=="GA"){
return(return_val)
#10
}else if(method=="tabuSearch"){
return(return_val)
#10
}else if(method=="rgenoud" | method=="pso" | method=="NMOF" | method=="DEoptim"){
return(return_val)
#10
}else if(method=="tabu_rj"){
return(return_val)
}
}
# 10
}
p_length = length(unlist(varList))
out = tabu_rj(size=p_length*nfac,iters=niter,fitness=fitness)
library(lavaan)
library(devtools)
library(rgenoud)
library(tabuSearch)
library(GA)
library(hydroPSO)
library(NMOF)
library(RcppDE)
setwd("/Users/RJacobucci/Documents/Github/autoSEM")
#setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
out = tabu_rj(size=p_length*nfac,iters=niter,fitness=fitness)
library(lavaan)
library(devtools)
library(rgenoud)
library(tabuSearch)
library(GA)
library(hydroPSO)
library(NMOF)
library(RcppDE)
setwd("/Users/RJacobucci/Documents/Github/autoSEM")
#setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
out = tabu_rj(size=p_length*nfac,iters=niter,fitness=fitness)
out
out = tabu_rj(size=p_length*nfac,iters=niter,fitness=fitness)
out = tabu_rj(size=p_length*nfac,iters=niter,fitness=fitness)
out = ga("binary", fitness = fitness, nBits = p_length*nfac,monitor=T,maxiter=niter,parallel=TRUE)
out = tabu_rj(size=p_length*nfac,iters=niter,fitness=fitness)
out = tabu_rj(size=p_length*nfac,iters=niter,fitness=fitness2)
size=p_length*nfac
iters=niter
fitness=fitness
fitness
string = matrix(NA,1,size)
for(i in 1:size) string[i] = rbinom(1,1,prob=0.5)
out = list()
K.best = 999999999
best.string <- rep(NA,length(string))
taboo.list <- matrix(NA,100,length(string))
count=0
count=count+1
string.mat = matrix(NA,10,length(string))
for(i in 1:nrow(string.mat)){
new.string=string
new.string[i] = ifelse(new.string[i] == 1,0,1)
string.mat[i,] = new.string
}
rowmatch <- function(A,B) {
# Rows in A that match the rows in B
f <- function(...) paste(..., sep=":")
if(!is.matrix(B)) B <- matrix(B, 1, length(B))
a <- do.call("f", as.data.frame(A))
b <- do.call("f", as.data.frame(B))
match(b, a)
}
rww = rowmatch(taboo.list,string.mat)
rww2 = rww[is.na(rww)==FALSE]
if(length(rww2)==0){
string.mat2 = string.mat
}else{
string.mat2 = string.mat[-rww2,]
}
if(nrow(string.mat2)==0){
break
}
K.vec = rep(NA,nrow(string.mat2))
for(i in 1:nrow(string.mat2)){
K.vec[i] = fitness(string.mat2[i,])
}
pos = which(K.vec == min(K.vec))
if(min(K.vec) < K.best){
K.best=min(K.vec)
best.string = string.mat2[pos,]
}
new.taboo = rbind(taboo.list,string.mat2)
if(sum(is.na(taboo.list[,1])) >0){
new.taboo = new.taboo[-c(1:sum(is.na(taboo.list[,1]))),]
taboo.list=new.taboo
}
if(nrow(new.taboo)>100){
new.taboo2 = new.taboo[(nrow(new.taboo)-100):nrow(new.taboo),]
taboo.list=new.taboo2
}
if(length(pos)>1){
string=string.mat[1,]
}else{
string=string.mat[pos,]
}
}
best.string
out$value = K.best
K.best
fitness(string.mat2[i,])
library(lavaan)
library(devtools)
library(rgenoud)
library(tabuSearch)
library(GA)
library(hydroPSO)
library(NMOF)
library(RcppDE)
setwd("/Users/RJacobucci/Documents/Github/autoSEM")
#setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
library(lavaan)
library(devtools)
library(rgenoud)
library(tabuSearch)
library(GA)
library(hydroPSO)
library(NMOF)
library(RcppDE)
setwd("/Users/RJacobucci/Documents/Github/autoSEM")
#setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
library(lavaan)
myData =  HolzingerSwineford1939[,7:15]
f1.vars <- c("x1","x2","x3","x4","x5","x6","x7","x8","x9")
rrr = list(f1.vars)
facs <- 1:4
out = autoSEM(method="tabu_rj",data=myData,nfac=3,varList=list(f1.vars),orth=FALSE,CV=FALSE,
criterion="RMSEA",minInd=3,niter=30)
out
out = autoSEM(method="tabu_rj",data=myData,nfac=1,varList=list(f1.vars),orth=FALSE,CV=FALSE,
criterion="RMSEA",minInd=3,niter=30)
out = autoSEM(method="tabu_rj",data=myData,nfac=1,varList=list(f1.vars),orth=FALSE,CV=FALSE,
criterion="RMSEA",minInd=3,niter=30)
out = autoSEM(method="tabu_rj",data=myData,nfac=2,varList=list(f1.vars),orth=FALSE,CV=FALSE,
criterion="RMSEA",minInd=3,niter=30)
out
out = autoSEM(method="tabu_rj",data=myData,nfac=1,varList=list(f1.vars),orth=FALSE,CV=FALSE,
criterion="RMSEA",minInd=3,niter=30)
p_length = length(unlist(varList))
list(f1.vars)
out = autoSEM(method="tabu_rj",data=myData,nfac=4,varList=list(f1.vars),orth=FALSE,CV=FALSE,
criterion="RMSEA",minInd=3,niter=30)
out
library(lavaan)
library(devtools)
library(rgenoud)
library(tabuSearch)
library(GA)
library(hydroPSO)
library(NMOF)
library(RcppDE)
setwd("/Users/RJacobucci/Documents/Github/autoSEM")
#setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
out = autoSEM(method="tabu_rj",data=myData,nfac=1,varList=list(f1.vars),orth=FALSE,CV=FALSE,
criterion="RMSEA",minInd=3,niter=30)
out
out = autoSEM(method="tabu_rj",data=myData,nfac=2,varList=list(f1.vars),orth=FALSE,CV=FALSE,
criterion="RMSEA",minInd=3,niter=30)
out = autoSEM(method="tabu_rj",data=myData,nfac=3,varList=list(f1.vars),orth=FALSE,CV=FALSE,
criterion="RMSEA",minInd=3,niter=30)
out = autoSEM(method="tabu_rj",data=myData,nfac=1,varList=list(f1.vars),orth=FALSE,CV=FALSE,
criterion="RMSEA",minInd=3,niter=30)
library(lavaan)
library(devtools)
library(rgenoud)
library(tabuSearch)
library(GA)
library(hydroPSO)
library(NMOF)
library(RcppDE)
setwd("/Users/RJacobucci/Documents/Github/autoSEM")
#setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
out = autoSEM(method="tabu_rj",data=myData,nfac=1,varList=list(f1.vars),orth=FALSE,CV=FALSE,
criterion="RMSEA",minInd=3,niter=30)
out = autoSEM(method="tabu_rj",data=myData,nfac=2,varList=list(f1.vars),orth=FALSE,CV=FALSE,
criterion="RMSEA",minInd=3,niter=30)
out
out = autoSEM(method="tabu_rj",data=myData,nfac=2,varList=list(f1.vars),orth=FALSE,CV=FALSE,
criterion="BIC",minInd=3,niter=30)
out
out = autoSEM(method="tabu_rj",data=myData,nfac=2,varList=list(f1.vars),orth=FALSE,CV=FALSE,
criterion="BIC",minInd=3,niter=30)
out
out = autoSEM(method="tabu_rj",data=myData,nfac=1,varList=list(f1.vars),orth=FALSE,CV=FALSE,
criterion="BIC",minInd=3,niter=30)
library(lavaan)
library(devtools)
library(rgenoud)
library(tabuSearch)
library(GA)
library(hydroPSO)
library(NMOF)
library(RcppDE)
setwd("/Users/RJacobucci/Documents/Github/autoSEM")
#setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
out = autoSEM(method="tabu_rj",data=myData,nfac=1,varList=list(f1.vars),orth=FALSE,CV=FALSE,
criterion="BIC",minInd=3,niter=30)
out
library(lavaan)
library(devtools)
library(rgenoud)
library(tabuSearch)
library(GA)
library(hydroPSO)
library(NMOF)
library(RcppDE)
setwd("/Users/RJacobucci/Documents/Github/autoSEM")
#setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
out = autoSEM(method="tabu_rj",data=myData,nfac=1,varList=list(f1.vars),orth=FALSE,CV=FALSE,
criterion="BIC",minInd=3,niter=30)
library(lavaan)
library(devtools)
library(rgenoud)
library(tabuSearch)
library(GA)
library(hydroPSO)
library(NMOF)
library(RcppDE)
setwd("/Users/RJacobucci/Documents/Github/autoSEM")
#setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
library(lavaan)
library(devtools)
library(rgenoud)
library(tabuSearch)
library(GA)
library(hydroPSO)
library(NMOF)
library(RcppDE)
setwd("/Users/RJacobucci/Documents/Github/autoSEM")
#setwd("C:/Users/jacobucc/Documents/Github/autoSEM")
#setwd("./regsem")
document()
setwd("..")
install("autoSEM")
#document()
#document("C:/Users/jacobucc/Documents/GitHub/regsem")
detach("package:autoSEM", unload=TRUE)
library(autoSEM)
out = autoSEM(method="tabu_rj",data=myData,nfac=1,varList=list(f1.vars),orth=FALSE,CV=FALSE,
criterion="BIC",minInd=3,niter=30)
out
out = autoSEM(method="tabu_rj",data=myData,nfac=2,varList=list(f1.vars),orth=FALSE,CV=FALSE,
criterion="BIC",minInd=3,niter=30)
out
out = autoSEM(method="tabu_rj",data=myData,nfac=9,varList=list(f1.vars),orth=FALSE,CV=FALSE,
criterion="BIC",minInd=3,niter=30)
out
out = autoSEM(method="tabu_rj",data=myData,nfac=3,varList=list(f1.vars),orth=FALSE,CV=FALSE,
criterion="BIC",minInd=3,niter=30)
out
out = autoSEM(method="tabu_rj",data=myData,nfac=4,varList=list(f1.vars),orth=FALSE,CV=FALSE,
criterion="BIC",minInd=3,niter=30)
out
out = autoSEM(method="tabu_rj",data=myData,nfac=3,varList=list(f1.vars),orth=FALSE,CV=FALSE,
criterion="BIC",minInd=3,niter=30)
out
